#!/usr/bin/env python
import numpy as np
#import matplotlib.pyplot as plt
import pylab as plt
#This is the value I used to draw Fig3: /afs/cern.ch/user/y/yduh/public/aran/fig3 (TGraph)
#With EW: k-factor for (NNLOxEW)/NNLO: /afs/cern.ch/user/y/yduh/public/aran/nnloew
#This is not really k-factors! It is NNLO/NLO * (QCD*EW)/QCD which I used for reweighing upon Powheg samples
#Without EW: k-factor for NNLO/NLO: /afs/cern.ch/user/y/yduh/public/aran/nnlo_nlo
#            k-factor for NLO/LO: /afs/cern.ch/user/y/yduh/public/aran/nlo_lo
# The up and down are uncertainties. For the first, they are the mass uncertainties. For the others, they are scale uncertainties. 

# Plotting results from: http://www.precision.hep.phy.cam.ac.uk/results/ttbar-nnloqcd-nloew/
#filein="LHC13-Mtt-HT4-NNPDF30QED-all_members.dat"
filein="LHC13-Mtt-HT4-NNPDF30QED-pheno.dat"
# bin-center  central-value scale-min scale-max pdf-min pdf-max total-min total-max bin-width K
Mtt, xs, xs_Smin, xs_Smax, xs_PDFmin, xs_PDFmax, xs_totmin, xs_totmax, binwidth, Kfactor = np.loadtxt(filein,unpack=True)
#print Mtt, binwidth 

#n=((Kfactor+1)*xs-xs)/xs
#n=Kfactor*xs
#print n
#print xs
print 'Mtt = ', Mtt

Kerrlo=np.abs((xs-xs_totmin)/xs)
Kerrup=np.abs((xs-xs_totmax)/xs)
plt.grid()
plt.errorbar(Mtt, Kfactor, [Kerrlo,Kerrup], linestyle='None', marker='o', markerfacecolor='black', markersize=5.2)

mttbar =  [350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1570, 1580, 1590, 1600, 1610, 1620, 1630, 1640, 1650, 1660, 1670, 1680, 1690, 1700, 1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780, 1790, 1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000]

deltaEW_LO =  [0.004580371741895516, -0.002709611458931588, -0.007407318749413982, -0.010507095401940286, -0.01285596520209887, -0.014602712418461134, -0.01597364395977964, -0.0171023291953274, -0.01805430255506835, -0.018837213531166918, -0.019533163644258028, -0.020135741137828837, -0.020698684259687745, -0.02120492303220713, -0.021653637460124157, -0.022110023163164943, -0.022483032378385278, -0.02286374922478384, -0.023231974142622666, -0.02354537806268255, -0.023878266884040527, -0.024216000455667915, -0.024514686455278243, -0.024818612787559546, -0.025124894048064065, -0.025444813979197078, -0.02571731333554243, -0.026006879388759375, -0.02627621992347326, -0.02653206110999807, -0.026874494974520578, -0.02712745126338954, -0.027375384138795533, -0.027694593056788397, -0.027973771701649542, -0.028209022360590547, -0.0285063222729494, -0.028807603448985166, -0.029097459555298494, -0.029397609947569805, -0.029682892059710954, -0.029934237113782704, -0.03021016388111946, -0.03047140165469526, -0.03073600658171606, -0.031035237422263655, -0.03135702530529452, -0.0316329924510294, -0.031906242627065665, -0.032226079554093574, -0.03246983454897488, -0.032732973838100955, -0.03307436080228765, -0.03329699468318561, -0.03365757508709061, -0.03399029335529053, -0.03423091791635906, -0.034499783601098816, -0.034718151959808416, -0.03508055646227869, -0.03543327571522477, -0.03569897050182502, -0.03593646121537002, -0.03625830583912493, -0.03658466595417832, -0.03681840833213168, -0.037191679633752694, -0.037491529030623964, -0.03776907443878841, -0.03809906768674143, -0.03836557271378859, -0.038672390372817673, -0.038940747774735586, -0.03926609235162632, -0.03956628784485679, -0.039884516494080716, -0.04015630005991468, -0.04041274681596138, -0.040722514470265904, -0.04096085874676575, -0.041258937266250365, -0.041600703364270165, -0.04194322282313334, -0.04222065541332907, -0.042438096836777336, -0.042866829323106814, -0.043147672623466936, -0.04336400589331942, -0.043625768459161635, -0.044017918994802445, -0.044318239254809016, -0.04456532109983797, -0.04493117228426778, -0.04522964822530513, -0.045585029067783986, -0.04579203513649114, -0.04605739576326053, -0.046412261918111826, -0.046633848478346, -0.046997942464707974, -0.047307900777781624, -0.04763108049944912, -0.04783933648366688, -0.0482513385341223, -0.04843581436121062, -0.0488176512703921, -0.0490365536113602, -0.04937784540696925, -0.04966861753513484, -0.05001767866559217, -0.050199746475396004, -0.05055119390103673, -0.05089282783703495, -0.05113507350599122, -0.051419641720294236, -0.05165357987138184, -0.05205034134787047, -0.05238289841033218, -0.05252974240238729, -0.05291331290459902, -0.053212272887758164, -0.05342604294165004, -0.05376733142543617, -0.054157441701357396, -0.05444024223001647, -0.05462812314083787, -0.055025811206785596, -0.05530045306487417, -0.05551294933876093, -0.05582056311759269, -0.05608891532268136, -0.056459825779217265, -0.056603375489810336, -0.05696077045469472, -0.0572351683130644, -0.057630479958448076, -0.05793500244307783, -0.058076241538017444, -0.058447641913193515, -0.05880114259351015, -0.05906254305290518, -0.059349869180784276, -0.059652626159296916, -0.05980719775637868, -0.060088772701414, -0.060455664701933254, -0.06079557864212989, -0.06106641409955688, -0.061384238464878296, -0.06170226055992555, -0.06195676716472394, -0.06230385540049082, -0.06242003801503391, -0.06271165790146657, -0.06300219971916125, -0.06330809377617351, -0.06357080538002846, -0.0638659152112073, -0.06421264867640193, -0.06451601939995165, -0.06477902458996213, -0.06507905143321127, -0.06538882157435125, -0.06561453599934926, -0.06591468160655829, -0.06622317069034671]

lowerband =  [0.0025719698882096845, -0.00395932155960604, -0.008228707850869068, -0.011071128656909405, -0.013244288518595769, -0.014869261553739443, -0.016155922019249678, -0.017218028178034927, -0.01811593295590201, -0.01886715357472909, -0.019529821041009192, -0.020117570556796163, -0.020644043691226677, -0.02114640372976023, -0.021579238355000908, -0.022005190879651883, -0.022383808672106917, -0.022754365118780165, -0.023114018037300826, -0.02341967517712666, -0.02374615995625514, -0.024077903429203157, -0.0243716664933785, -0.024670996970691177, -0.024973267038506934, -0.025289623433163846, -0.025559030401179114, -0.025845815291599857, -0.02611272605088687, -0.02639242143823041, -0.026706664750374646, -0.026957914476288845, -0.02723178325881578, -0.027521910712566336, -0.027799823931353326, -0.028062675323984636, -0.028359121043061895, -0.02863026950139739, -0.028919148212094223, -0.02921830722713142, -0.0295027440471941, -0.029753521103467056, -0.03002874094921868, -0.030320902427528693, -0.03058532017906724, -0.030884138205503543, -0.03117302979104128, -0.031448362638992096, -0.03175419661390236, -0.03204028558715159, -0.03231735323449035, -0.03258040338800644, -0.03292116230669279, -0.03314401180224338, -0.0335038218396996, -0.0338010439748489, -0.034076672885726994, -0.03434546129464477, -0.03456405131879804, -0.03492565045386537, -0.03527763340734754, -0.035506772947988714, -0.03578077571295351, -0.036102093960279476, -0.036427884247900076, -0.03666175851951831, -0.03703408055843402, -0.037333533415253285, -0.037572780050834635, -0.03790192302805589, -0.03816806177761119, -0.03847417706009485, -0.03874211827496118, -0.0390665802357471, -0.03940537957951866, -0.03972297755391777, -0.03999447123086537, -0.0402507319115995, -0.040559896922590474, -0.04079816656630755, -0.04109570653660781, -0.04143672669366088, -0.04177834933675947, -0.04205536426856902, -0.0422728252941277, -0.04265887386220788, -0.04298048573231438, -0.04319680954126369, -0.043458213013115886, -0.04384916126814727, -0.04414881474448979, -0.04439561351412458, -0.04476043000934754, -0.045058223477835946, -0.04536995724659303, -0.04561960264509163, -0.045884493137209895, -0.04623836039817163, -0.04645977498469529, -0.046822787442095025, -0.04713191472664601, -0.04745429299308697, -0.04766243246686434, -0.04807297894332353, -0.04825748947844567, -0.04863807214894411, -0.0488567448919598, -0.04919705658409455, -0.04948707323771096, -0.04983508557093149, -0.0500171504291146, -0.050367517072780595, -0.0507081346029901, -0.05094992917650995, -0.05123386504170688, -0.05146739633090048, -0.051862731546158065, -0.05219430342015199, -0.05234132106556866, -0.05272354124162614, -0.053021728924324385, -0.05323518999858185, -0.05357540355434937, -0.053964101798710876, -0.05419970730540106, -0.0544339376325277, -0.054830150509056694, -0.05510414330945335, -0.05531629775750416, -0.055623028611222314, -0.055890755507384024, -0.05626035037589491, -0.056403996055320954, -0.05676015739981536, -0.05703386789880125, -0.057427688659016304, -0.057731317110323685, -0.05787263805764517, -0.05824269590399998, -0.05859496838611656, -0.05885573969645571, -0.05914226264229709, -0.05944411251698115, -0.059598646598416224, -0.0598794424680067, -0.060245001676962034, -0.06058375434210347, -0.06085386956094316, -0.06117066964003338, -0.06148766361182064, -0.06174154319472642, -0.06203825999114569, -0.062203761970011234, -0.06249450769822252, -0.06278417890976223, -0.06308910392479315, -0.06335111324501531, -0.06364531607850933, -0.06399081739964238, -0.06429322553524625, -0.06455551591519852, -0.0648545960228851, -0.06516335587359404, -0.06538857766210389, -0.06568776794833679, -0.06599524903442591]

upperband =  [0.007694669544271513, -0.0008895638208266902, -0.0061864655614704755, -0.009717687288806223, -0.012291945775522185, -0.014205323536144327, -0.015692788786885837, -0.0169138577130358, -0.017928074193775952, -0.018765342208269652, -0.019506109151917146, -0.020144679452760765, -0.020737455260009665, -0.021252906932345477, -0.02173876227360994, -0.02219791984422478, -0.02258237781499808, -0.022980695465300117, -0.0233512287187846, -0.02368772611064096, -0.02401651568744026, -0.0243757618614931, -0.024666092664823797, -0.024981154693661283, -0.025300981586647925, -0.025589185921233763, -0.025874360273084106, -0.02616361336748084, -0.026460581576121082, -0.026724331853397187, -0.027041824669690333, -0.02732536865724672, -0.027573495293618862, -0.027883262252205675, -0.02815142478017683, -0.02841074508827373, -0.028712563798233327, -0.02898270455756297, -0.02927852556557146, -0.02957608408557239, -0.02985219222405365, -0.030113835148036044, -0.030386826548307832, -0.030651081794430716, -0.0309292108060524, -0.031237864923964066, -0.031546163013668416, -0.03182296768192762, -0.03207919912959373, -0.032409488643457426, -0.032661330932120466, -0.03295230474556765, -0.03325548639845741, -0.03352593050424617, -0.033842930962860285, -0.034182371498209636, -0.03439710729964585, -0.034687039717781226, -0.034955242228665355, -0.03527883522189637, -0.03560362543817361, -0.035898915259949024, -0.03616610789317223, -0.036452726509673725, -0.03674907659747461, -0.03703108854997094, -0.037381176224840613, -0.03767473886168489, -0.03797126261261404, -0.038281177543168295, -0.03856247706173933, -0.03885758296401823, -0.039146432135280164, -0.03946473163247301, -0.03977240668446535, -0.04007632030461919, -0.040344063922321705, -0.04061972625497476, -0.040906655962873024, -0.04116629623272033, -0.041480354188559984, -0.04182407535779815, -0.042146171474377776, -0.04240448299559569, -0.04265176716782237, -0.043075138516051145, -0.0433353761309603, -0.043568070795093804, -0.04387508846847241, -0.04423812861022283, -0.04452185118220618, -0.04481015002400713, -0.04515505878664268, -0.045430037096127814, -0.045780903576379504, -0.04600868268082264, -0.0462608945592713, -0.04661693734091435, -0.04684287493685578, -0.04723538049007413, -0.0475060645199791, -0.04783698772897399, -0.048069810510668984, -0.048452154115667743, -0.048658597801749234, -0.04903283250411454, -0.049248159876308685, -0.04962010732935045, -0.049885680358267695, -0.050226181777136475, -0.05041979604201116, -0.05076956082170004, -0.051125866130043156, -0.05133658492590753, -0.05165236404769765, -0.051942508756730184, -0.05227222836031949, -0.05259075197186994, -0.05277085205352427, -0.05312754254687153, -0.05344677096529565, -0.05365677180640878, -0.05401623758048418, -0.05437180264760795, -0.05467185315388507, -0.05488337822760214, -0.05524122860600368, -0.0555446153094065, -0.05574155779290525, -0.05603722754887967, -0.05634154831789726, -0.056686139070589565, -0.05690269098413995, -0.057184515231902745, -0.05750114963266534, -0.05786756837778548, -0.05816762763192575, -0.0583378090900545, -0.05870491672979401, -0.059028826423730155, -0.059300137171726074, -0.059593968441359606, -0.05989797039995947, -0.0600961466822104, -0.060357745162820005, -0.06071723259340222, -0.06103529203228763, -0.06132324384034737, -0.06164258758646939, -0.06194051192382387, -0.06222750511215352, -0.06254885090242236, -0.06267388844426919, -0.06296644169100435, -0.06326348281381353, -0.06355611107382741, -0.06383093969677137, -0.06414487848017811, -0.06447852352233746, -0.06476956842487085, -0.06504625903506742, -0.0653509356092069, -0.06563359966046826, -0.06588546963791693, -0.0661897893575684, -0.0665024632706945]


DEWLO=np.add(deltaEW_LO,np.ones(len(deltaEW_LO)))
plt.plot(mttbar, DEWLO, linewidth=2.0, linestyle='-', color='black')
#DEWLO_lo=DEWLO-lowerband
#plt.plot(mttbar, DEWLO_lo, linewidth=1.0, linestyle='--', color='black')
#DEWLO_up=DEWLO+upperband
#plt.plot(mttbar, DEWLO_up, linewidth=1.0, linestyle='--', color='black')


#plt.bar(bincenters, 2*errbsum, bottom=bkgsum-errbsum, width=(bins[-1]-bins[0])/(len(bins)-1), color='none', align='center',hatch='///',linestyle='solid',linewidth=1.0)
plt.xlim(330.,2100.)
plt.legend( ('NNLO QCDxNLO EW','Hathor: LO QCD+LO EW') , loc='upper right', frameon=False, numpoints=1)
plt.ylim(0.85,1.10)
plt.title("Hathor vs arXiv:1705.04105 (Y=1)")
plt.xlabel(r"M$_{t\bar{t}}$ [GeV]")
plt.ylabel("k-factor")
plt.savefig("top_QCDNNLO-EWNLO_Mtt.png")

# Plot the ratio of NNLO to Hathor
plt.figure()
# I need to get only those values of deltaEW_LO that have a Mtt entry:
a=set(Mtt)
idx_match=[i for i, item in enumerate(mttbar) if item in a]
small_deltaEW_LO=[deltaEW_LO[i] for i in idx_match] # get those values for which the mass matches
small_deltaEW_LO=np.add(small_deltaEW_LO,np.ones(len(small_deltaEW_LO)))
small_Kfactor=Kfactor[Mtt<2100.] # Need to restrict Mtt because mttbar only goes to 2000.
small_Mtt=Mtt[Mtt<2100.]
ratio=small_Kfactor/small_deltaEW_LO
#Err on NNLO
small_Kerr=np.abs(Kerrlo[Mtt<2100.])
# Err on deltaEW_LO 
small_DEWLOerr=[upperband[i] for i in idx_match]
error=ratio*np.sqrt((np.power(small_Kerr,2)/np.power(small_Kfactor,2))+(np.power(small_DEWLOerr,2)/np.power(small_deltaEW_LO,2)))
plt.fill_between(small_Mtt, ratio-error, ratio+error, alpha=0.3, color='grey')

plt.plot(small_Mtt, ratio, linewidth=2.0, linestyle='-', color='black')
plt.xlim(330.,2100.)
plt.grid()
plt.legend( ('NNLO/Hathor',' ') , loc='upper right', frameon=False, numpoints=1)
plt.ylim(0.90,1.20)
plt.title("Hathor vs arXiv:1705.04105 (Y=1)")
plt.xlabel(r"M$_{t\bar{t}}$ [GeV]")
plt.ylabel("Ratio NNLO/Hathor")
plt.savefig("top_QCDNNLO-EWNLO_ratio.png")

# Together:
plt.figure()
import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 1, height_ratios=[2,1]) # 1 column, 2 rows, 1st row is 4 times bigger
ax1 = plt.subplot(gs[0])
ax2 = plt.subplot(gs[1], sharex=ax1) # important that they share the same X axis!
# Now, ax1 is the first subplot 
ax1.errorbar(Mtt, Kfactor, [Kerrlo,Kerrup], linestyle='None', marker='o', markerfacecolor='blue', markersize=5.2)
ax1.plot(mttbar, DEWLO, linewidth=2.0, linestyle='-', color='red')
ax1.set_title('Hathor vs arXiv:1705.04105 (Y=1)')
ax1.set_ylabel('k-factor')
ax1.set_xlim(330.,2100.)
ax1.legend( ('NNLO QCDxNLO EW','Hathor: LO QCD+LO EW') , loc='upper right', frameon=False, numpoints=1)
ax1.set_ylim(0.85,1.12)
ax1.grid()
# Now let's calculate the ratio for ax2:
ax2.fill_between(small_Mtt, ratio-error, ratio+error, alpha=0.3, color='grey')
ax2.plot(small_Mtt, ratio, linewidth=2.0, linestyle='-', color='black')
ax2.set_ylim(0.90,1.2)
ax2.grid()
ax2.set_xlabel(r"M$_{t\bar{t}}$ [GeV]")
ax2.set_ylabel("Ratio NNLO/Hathor")
# Draw horizontal line at 1: 
ax2.plot([330, 2100], [1.0, 1.0], 'k--', lw=1)
plt.setp(ax1.get_xticklabels(), visible=False)
plt.subplots_adjust(hspace=0.05)
plt.savefig("top_QCDNNLO-EWNLO_combo.png")

plt.figure()
# bin-center  central-value scale-min scale-max pdf-min pdf-max total-min total-max bin-width
Mttlo, xslo, xslo_Smin, xslo_Smax, xslo_PDFmin, xslo_PDFmax, xslo_totmin, xslo_totmax, lobinwidth = np.loadtxt("mtt_lo_13tev.txt",unpack=True)
Mttnlo, xsnlo, xsnlo_Smin, xsnlo_Smax, xsnlo_PDFmin, xsnlo_PDFmax, xsnlo_totmin, xsnlo_totmax, nlobinwidth = np.loadtxt("mtt_nlo_13tev.txt",unpack=True)
Mttnnlo, xsnnlo, xsnnlo_Smin, xsnnlo_Smax, xsnnlo_PDFmin, xsnnlo_PDFmax, xsnnlo_totmin, xsnnlo_totmax, nnlobinwidth = np.loadtxt("mtt_nnlo_13tev.txt",unpack=True)

knlo=xsnlo/xslo; kupnlo=np.sqrt(knlo**2*(((xsnlo-xsnlo_totmax)/xsnlo)**2+((xslo-xslo_totmax)/xslo)**2)); klonlo=np.sqrt(knlo**2*(((xsnlo-xsnlo_totmin)/xsnlo)**2+((xslo-xslo_totmin)/xslo)**2))
knnlo=xsnnlo/xsnlo; kupnnlo=np.sqrt(knnlo**2*(((xsnnlo-xsnnlo_totmax)/xsnnlo)**2+((xsnlo-xsnlo_totmax)/xsnlo)**2)); klonnlo=np.sqrt(knnlo**2*(((xsnnlo-xsnnlo_totmin)/xsnnlo)**2+((xsnlo-xsnlo_totmin)/xsnlo)**2))

#print knlo, kupnlo, klonlo 
plt.fill_between(Mttlo, knlo+kupnlo, knlo-klonlo, alpha=.5)
plt.plot(Mttlo,knlo,linewidth=2.0, linestyle='--', color='blue')
plt.fill_between(Mttlo, knnlo+kupnnlo, knnlo-klonnlo, alpha=.5, color='red')
plt.plot(Mttlo,knnlo,linewidth=2.0, linestyle='-', color='red')
plt.legend( ('NLO/LO','NNLO/NLO') , loc='upper left', frameon=False, numpoints=1)
plt.xlabel(r"M$_{t\bar{t}}$ [GeV]")
plt.ylabel("k-factor")
plt.savefig("top_xs_Mtt.png")







